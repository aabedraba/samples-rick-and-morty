{
  "routes": [
    {
      "tags": [
        "Characters"
      ],
      "methods": [
        "GET"
      ],
      "path": "/characters",
      "summary": "Get all characters",
      "description": "You can access the list of characters by using the `/characters` endpoint. Pagination is supported via the `?page=2` querystring. You can also filter the results using the `name`, `status`, `species`, `type` and `gender` query parameters. ",
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/character${search}"
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Pagination index",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "name",
          "in": "query",
          "description": "filter by the given name",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "status",
          "in": "query",
          "description": "filter by the status, one of `dead`, `alive` or `unknown`",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "species",
          "in": "query",
          "description": "filter by the species",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type",
          "in": "query",
          "description": "filter by the given type",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "gender",
          "in": "query",
          "description": " filter by the given gender (female, male, genderless or unknown)",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "OK Response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "$import(./schemas/all-characters.json)"
              }
            }
          }
        }
      },
      "policies": {
        "inbound": [],
        "outbound": [
          "replace-urls"
        ]
      }
    },
    {
      "tags": [
        "Characters"
      ],
      "methods": [
        "GET"
      ],
      "path": "/characters/:characterId",
      "summary": "Get a characters by ID(s)",
      "description": "You can get a single character by ID, or multiple by adding an array of ids as parameter: `/characters/[1,2,3]` or `/characters/1,2,3`",
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/character/${params.characterId}"
        }
      },
      "parameters": [
        {
          "name": "characterId",
          "in": "path",
          "description": "A single numeric ID or multiple IDs, e.g. `[1,2,3]` or `1,2`",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "$import(./schemas/single-character.json)"
              }
            }
          },
          "description": "test"
        }
      },
      "policies": {
        "inbound": [],
        "outbound": [
          "replace-urls"
        ]
      }
    },
    {
      "tags": [
        "Locations"
      ],
      "methods": [
        "GET"
      ],
      "path": "/locations",
      "summary": "Get all locations",
      "description": "You can access the list of locations by using the `/locations` endpoint.",
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/location${search}"
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Pagination index",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "name",
          "in": "query",
          "description": "filter by the given name",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type",
          "in": "query",
          "description": "filter by the type",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "dimension",
          "in": "query",
          "description": "filter by the dimension",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "200 OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "$import(./schemas/all-locations.json)"
              }
            }
          }
        }
      },
      "policies": {
        "inbound": [],
        "outbound": [
          "replace-urls"
        ]
      }
    },
    {
      "tags": [
        "Locations"
      ],
      "methods": [
        "GET"
      ],
      "path": "/locations/:locationId",
      "summary": "Get locations by ID(s)",
      "description": "You can get a single location by ID, or multiple by adding an array of ids as parameter: `/locations/[1,2,3]` or `/locations/1,2,3`",
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/location/${params.locationId}"
        }
      },
      "parameters": [
        {
          "name": "locationId",
          "in": "path",
          "description": "A single numeric ID or multiple IDs, e.g. `[1,2,3]` or `1,2`",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "200 OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "$import(./schemas/single-location.json)"
              }
            }
          }
        }
      },
      "policies": {
        "inbound": [],
        "outbound": [
          "replace-urls"
        ]
      }
    },
    {
      "tags": [
        "Episodes"
      ],
      "methods": [
        "GET"
      ],
      "path": "/episodes/",
      "summary": "Get all episodes",
      "description": "You can access the list of episodes by using the `/episodes` endpoint.",
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/episode${search}"
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Pagination index",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "name",
          "in": "query",
          "description": "filter by the given name",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "episode",
          "in": "query",
          "description": "filter by the given episode code",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "200 OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "$import(./schemas/all-episodes.json)"
              }
            }
          }
        }
      },
      "policies": {
        "inbound": [],
        "outbound": [
          "replace-urls"
        ]
      }
    },
    {
      "tags": [
        "Episodes"
      ],
      "methods": [
        "GET"
      ],
      "path": "/episodes/:episodeId",
      "summary": "Get episodes by ID(s)",
      "description": "You can get a single episode by ID, or multiple by adding an array of ids as parameter: `/episodes/[1,2,3]` or `/episodes/1,2,3`",
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/episode/${params.episodeId}"
        }
      },
      "parameters": [
        {
          "name": "episodeId",
          "in": "path",
          "description": "A single numeric ID or multiple IDs, e.g. `[1,2,3]` or `1,2`",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "200 OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "$import(./schemas/single-episode.json)"
              }
            }
          }
        }
      },
      "policies": {
        "inbound": [],
        "outbound": [
          "replace-urls"
        ]
      }
    },
    {
      "methods": [
        "GET"
      ],
      "path": "/characters/avatar/:imageId",
      "summary": "Get Avatar",
      "excludeFromOpenApi": true,
      "version": "v1",
      "corsPolicy": "anything-goes",
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "${env.BASE_URL}/character/avatar/${params.imageId}"
        }
      },
      "policies": {
        "inbound": [],
        "outbound": []
      }
    },
    {
      "methods": [
        "GET"
      ],
      "path": "/favicon.ico",
      "summary": "favicon",
      "description": "Lorem ipsum dolor sit amet, **consectetur adipiscing** elit, sed do `eiusmod tempor` incididunt ut labore et dolore magna aliqua.",
      "version": "none",
      "corsPolicy": "none",
      "excludeFromOpenApi": true,
      "handler": {
        "export": "urlRewriteHandler",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "rewritePattern": "https://rickandmortyapi.com/favicon-32x32.png"
        }
      },
      "policies": {
        "inbound": [],
        "outbound": []
      }
    },
    {
      "methods": [
        "GET"
      ],
      "path": "/",
      "summary": "Root redirect",
      "excludeFromOpenApi": true,
      "version": "none",
      "corsPolicy": "none",
      "handler": {
        "export": "default",
        "module": "$import(./modules/redirect)",
        "options": {}
      },
      "policies": {
        "inbound": [],
        "outbound": []
      }
    }
  ],
  "versions": [
    {
      "name": "none",
      "pathPrefix": ""
    },
    {
      "name": "v1",
      "pathPrefix": "/v1",
      "tags": [
        {
          "name": "Characters",
          "description": "There are over 800 characters to explore."
        },
        {
          "name": "Locations",
          "description": "There are over 125 locations to explore."
        },
        {
          "name": "Episodes",
          "description": "There are over 50 episodes to explore."
        }
      ],
      "info": {
        "title": "The Rick and Morty API (via a Zuplo Gateway)",
        "description": "This is an example API proxied via [Zuplo](zuplo.com) - these docs are generated based on the gateway configuration. Full credit to the original and upstream API, which is available at [rickandmortyapi.com](https://rickandmortyapi.com/).\n\\\n\\\n The source for the gateway is available [on GitHub here](https://github.com/zuplo/samples-rick-and-morty). \n\\\n\\\n The Rick and Morty API is a REST(ish) API based on the television show Rick and Morty. You will have access to about hundreds of characters, images, locations and episodes. The Rick and Morty API is filled with canonical information as seen on the TV show. \n\\\n\\\n![Rick](https://rickandmortyapi.com/api/character/avatar/631.jpeg)",
        "version": "1.0.0"
      }
    }
  ],
  "policies": [
    {
      "name": "replace-urls",
      "policyType": "custom-code-outbound",
      "handler": {
        "export": "ReplaceStringOutboundPolicy",
        "module": "$import(@zuplo/runtime)",
        "options": {
          "mode": "regexp",
          "match": "https://rickandmortyapi.com/api/(episode|location|character)",
          "replaceWith": "https://rickandmorty.zuplo.app/v1/$1s"
        }
      }
    }
  ]
}